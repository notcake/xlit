local self = {}Xlit.CharacterReplacementMap = Xlit.MakeConstructor (self)function self:ctor ()	self.Characters = {}	self.Unsaved = falseendfunction self:Deserialize (inBuffer)	local character = inBuffer:String ()	while character ~= "" do		local replacement = inBuffer:String ()		self.Characters [character] = replacement		character = inBuffer:String ()	endendfunction self:Serialize (outBuffer)	for character, replacement in pairs (self.Characters) do		outBuffer:String (character)		outBuffer:String (replacement)	end	outBuffer:String ("")endfunction self:GetCharacterReplacement (character)	return self.Characters [character]endfunction self:IsUnsaved ()	return self.Unsavedendfunction self:SetCharacterReplacement (character, replacement)	if not character then return end	if character == "" then return end	if self.Characters [character] == replacement then return end		self.Characters [character] = replacement	self.Unsaved = trueendfunction self:TranslateString (str)	return GLib.UTF8.TransformString (str,		function (c)			return self:GetCharacterReplacement (c) or c		end	)end