local self = {}--[[	Events:		BaseCodePointChanged (baseCodePoint)			Fired when the base code point has changed.		SelectedCodePointChanged (codePoint)			Fired when the selected code point has changed.]]function self:Init ()	self.BaseCodePoint     = 0	self.SelectedCodePoint = 0		self.CellWidth = 32	self.CellHeight = 32		self.ToolTipController = Gooey.ToolTipController (self)	self.ToolTipController:SetManual (true)endfunction self:CodePointFromPoint (x, y)	local columnCount = self:GetColumnCount ()	local rowCount    = self:GetRowCount ()	x = math.floor (x / self.CellWidth)	y = math.floor (y / self.CellHeight)		if x >= columnCount or y >= rowCount then		return nil	end		return self.BaseCodePoint + y * columnCount + xendfunction self:GetBaseCodePoint ()	return self.BaseCodePointendfunction self:GetColumnCount ()	return math.floor (self:GetWide () / self.CellWidth)endfunction self:GetRowCount ()	return math.floor (self:GetTall () / self.CellHeight)endfunction self:GetSelectedCodePoint ()	return self.SelectedCodePointendfunction self:IsCodePointVisible (codePoint)	local baseCodePoint = self.BaseCodePoint	local visibleCodePoints = self:GetColumnCount () * self:GetRowCount ()	return codePoint >= baseCodePoint and codePoint < baseCodePoint + visibleCodePointsendfunction self:Paint (w, h)	surface.SetDrawColor (GLib.Colors.White)	surface.DrawRect (0, 0, w, h)	surface.SetDrawColor (GLib.Colors.Black)	surface.DrawOutlinedRect (0, 0, w, h)		local columnCount = math.floor (w / self.CellWidth)	local rowCount    = math.floor (h / self.CellHeight)		surface.SetFont ("DermaDefault")	for y = 0, rowCount - 1 do		for x = 0, columnCount - 1 do			local codePoint = self.BaseCodePoint + y * columnCount + x			local character = GLib.UTF8.Char (codePoint)						-- Background			local backgroundColor = nil						-- Decomposition			if GLib.Unicode.CodePointHasDecomposition (codePoint) then				backgroundColor = GLib.Colors.LightGreen			end						-- ASCII			if codePoint < 127 and not GLib.Unicode.IsControlCodePoint (codePoint) then				backgroundColor = GLib.Colors.LightBlue			end						-- Not assigned			if GLib.Unicode.GetCodePointCategory (codePoint) == GLib.UnicodeCategory.OtherNotAssigned then				backgroundColor = GLib.Colors.Silver			end						-- Transliteration			if GLib.Unicode.CodePointHasTransliteration (codePoint) then				backgroundColor = GLib.Colors.Orange			end						-- Selection			if self.SelectedCodePoint == codePoint then				backgroundColor = GLib.Colors.CornflowerBlue			end						if backgroundColor then				surface.SetDrawColor (backgroundColor)				surface.DrawRect (x * self.CellWidth, y * self.CellHeight, self.CellWidth, self.CellHeight)			end						-- Character			local textWidth, textHeight = surface.GetTextSize (character)			surface.SetTextColor (GLib.Colors.Black)			surface.SetTextPos (x * self.CellWidth + 0.5 * (self.CellWidth - textWidth), y * self.CellHeight + 0.5 * (self.CellHeight - textHeight))			surface.DrawText (character)		end	end		-- Gridlines	surface.SetDrawColor (GLib.Colors.Black)	for x = 0, w, self.CellWidth do		surface.DrawLine (x, 0, x, h)	end	for y = 0, h, self.CellHeight do		surface.DrawLine (0, y, w, y)	endendfunction self:SetBaseCodePoint (baseCodePoint)	if self.BaseCodePoint == baseCodePoint then return end		self.BaseCodePoint = baseCodePoint	self:DispatchEvent ("BaseCodePointChanged", self.BaseCodePoint)endfunction self:SetSelectedCodePoint (codePoint)	if self.SelectedCodePoint == codePoint then return end		self.SelectedCodePoint = codePoint	self:DispatchEvent ("SelectedCodePointChanged", self.SelectedCodePoint)end-- Event handlersfunction self:OnMouseDown (mouseCode, x, y)	if mouseCode == MOUSE_LEFT then		local codePoint = self:CodePointFromPoint (x, y)		if not codePoint then return end				self:SetSelectedCodePoint (codePoint)	endendfunction self:OnMouseMove (mouseCode, x, y)	local codePoint = self:CodePointFromPoint (x, y)	if not codePoint then		self.ToolTipController:HideToolTip ()		return	end		if mouseCode == MOUSE_LEFT then		self:SetSelectedCodePoint (codePoint)	end		self.ToolTipController:ShowToolTip (		string.format ("U+%06X", codePoint) .. "\n" ..		GLib.Unicode.GetCodePointName (codePoint) .. "\n" ..		GLib.UnicodeCategory [GLib.Unicode.GetCodePointCategory (codePoint)]	)endGooey.Register ("XlitCharacterMap", self, "GPanel")